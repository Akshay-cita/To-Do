{"version":3,"sources":["Todo.js","todolist.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Todo","className","type","checked","this","props","todo","completed","onChange","handleChange","id","React","Component","TodoList","App","state","bind","setState","prevState","map","console","log","date","Date","todolist","todo_item","key","getHours","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"kNAeeA,G,mMAVF,IAAD,OACR,OAAQ,yBAAKC,UAAY,aACzB,2BAAOC,KAAK,WACZC,QAASC,KAAKC,MAAMC,KAAKC,UACzBC,SAAW,kBAAM,EAAKH,MAAMI,aAAa,EAAKJ,MAAMC,KAAKI,OAEzD,2BAAIN,KAAKC,MAAMC,KAAKA,W,GAPLK,IAAMC,YC6BVC,EAjCE,CACb,CACIH,GAAG,EACHJ,KAAM,uBACNC,WAAW,GAGf,CACIG,GAAG,EACHJ,KAAM,2BACNC,WAAW,GAEf,CACIG,GAAG,EACHJ,KAAM,yBACNC,WAAW,GAEf,CACIG,GAAG,EACHJ,KAAM,qBACNC,WAAW,GAEf,CACIG,GAAG,EACHJ,KAAM,2BACNC,WAAW,GAEf,CACIG,GAAG,EACHJ,KAAM,yBACNC,WAAW,I,kOCwBJO,E,YA/Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXT,KAAMO,GAGV,EAAKJ,aAAe,EAAKA,aAAaO,KAAlB,gBANN,E,0EASDN,GACTN,KAAKa,UAAS,SAAAC,GAUZ,MAAO,CACLZ,KAVcY,EAAUZ,KAAKa,KAAK,SAAAb,GAClC,OAAIA,EAAKI,KAAOA,E,yVACP,CAAP,GACKJ,EADL,CAEEC,WAAYD,EAAKC,YAGdD,SAMXc,QAAQC,IAAI,WAAYX,K,+BAI3B,IAAD,OAIE,IAAMY,EAAO,IAAIC,KACXC,EAAWpB,KAAKW,MAAMT,KAAKa,KAAI,SAAAM,GAAS,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAUf,GAAIJ,KAAMmB,EAAWhB,aAAc,EAAKA,kBAE/G,OACA,yBAAKR,UAAU,aACf,yCAAeqB,EAAKK,WAAY,GAAhC,sBACGH,EACD,4BAAQI,QAVV,WACER,QAAQC,IAAI,oBASZ,iB,GAxCYV,IAAMC,WCMJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e6b3cfe2.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { tsPropertySignature } from \"@babel/types\";\n\nclass Todo extends React.Component {\n    render(){\n    return (<div className = \"todo-item\">\n    <input type=\"checkbox\" \n    checked={this.props.todo.completed}\n    onChange={ () => this.props.handleChange(this.props.todo.id)} />\n    \n    <p>{this.props.todo.todo}</p>\n    </div>)\n}\n}\nexport default Todo;","const TodoList = [\n    {\n        id:1,\n        todo: \"Do something special\",\n        completed: false\n    },\n\n    {\n        id:2,\n        todo: \"Do something adventurous\",\n        completed: true\n    },\n    {\n        id:3,\n        todo: \"Do something dangerous\",\n        completed: true\n    },\n    {\n        id:4,\n        todo: \"Do something daily\",\n        completed: true\n    },\n    {\n        id:5,\n        todo: \"Do something interesting\",\n        completed: true\n    },\n    {\n        id:6,\n        todo: \"Do something different\",\n        completed: true\n    }\n]\nexport default TodoList;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './Todo';\nimport TodoList from './todolist';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todo: TodoList\n    \n  }\n  this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id) {\n      this.setState(prevState => {\n        const Updated = prevState.todo.map( todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed: !todo.completed\n            }\n          }\n          return todo;\n        })\n        return {\n          todo:Updated\n        };\n      })\n      console.log(\"updated \" ,id)\n  }\n  \n  render()\n  {\n    function handleClick() {\n      console.log(\"Button Clicked\")\n    }\n    const date = new Date();\n    const todolist = this.state.todo.map(todo_item => <Todo key={todo_item.id} todo={todo_item} handleChange={this.handleChange}/> )\n    \n    return (\n    <div className=\"todo-list\">\n    <h1>Hi, It is {date.getHours() %12}'O clock already! </h1>\n      {todolist}\n      <button onClick={handleClick} > Submit </button>\n    </div>\n    \n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}